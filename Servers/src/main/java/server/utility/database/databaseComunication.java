package server.utility.database;

import common.utility.outPuter;
import server.app;

import java.sql.*;

public class databaseComunication {
	 // Table names
    public static final String HUMAN_TABLE = "human";
    public static final String USER_TABLE = "account";
    public static final String COORDINATES_TABLE = "coordinates";
    public static final String MOOD_TABLE = "mood";
    public static final String WEAPON_TABLE = "weapon";
    public static final String CAR_TABLE = "car";



    // Human table column names
    public static final String HUMAN_TABLE_ID_COLUMN = "id";
    public static final String HUMAN_TABLE_NAME_COLUMN = "name";
    public static final String HUMAN_TABLE_COORDINATES_ID_COLUMN = "coordinatesId";
    public static final String HUMAN_TABLE_CREATION_DATE_COLUMN = "creationDate";
    public static final String HUMAN_TABLE_TRUE_HERO_COLUMN = "trueHero";
    public static final String HUMAN_TABLE_TOOTH_PICK_COLUMN = "toothPick";
    public static final String HUMAN_TABLE_SPEED_COLUMN = "speed";
    public static final String HUMAN_TABLE_MINUTES_WATING_COLUMN = "minutesWaiting";
    public static final String HUMAN_TABLE_WEAPON_ID_COLUMN = "weaponId";
    public static final String HUMAN_TABLE_MOOD_ID_COLUMN = "moodId";
    public static final String HUMAN_TABLE_CAR_ID_COLUMN = "carId";
    public static final String HUMAN_TABLE_ACCOUNT_ID_COLUMN = "accountId";

    // Account table column names
    public static final String USER_TABLE_ID_COLUMN = "accountId";
    public static final String USER_TABLE_USERNAME_COLUMN = "username";
    public static final String USER_TABLE_DISPLAY_NAME_COLUMN = "displayName";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";
    public static final String USER_TABLE_TYPE_COLUMN = "type";

    // Coordinates table column names
    public static final String COORDINATES_TABLE_ID_COLUMN = "coordinatesId";
    public static final String COORDINATES_TABLE_X_COLUMN = "x";
    public static final String COORDINATES_TABLE_Y_COLUMN = "y";

    // Car column names
    public static final String CAR_TABLE_ID_COLUMN = "carId";
    public static final String CAR_TABLE_COOL_COLUMN = "cool";
    // Weapon table column names
    public static final String WEAPON_TABLE_ID_COLUMN = "weaponId";
    public static final String WEAPON_TABLE_TYPE_COLUMN = "type";
    // Mood table column names
    public static final String MOOD_TABLE_ID_COLUMN = "moodId";
    public static final String MOOD_TABLE_TYPE_COLUMN = "type";

    // Type of database driver
    private final String JDBC_DRIVER = "org.postgresql.Driver";

    // Configures
    private final String url;
    private final String user;
    private final String password;
    private Connection connection;

    public databaseComunication (String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDataBase();
    }

    /**
     * A class for connect to database.
     */
    private void connectToDataBase() {
        try {
            Class.forName(JDBC_DRIVER);
            connection = DriverManager.getConnection(url, user, password);
            outPuter.println("The database connection has been established.");
            app.logger.info("The database connection has been established.");
        } catch (SQLException exception) {
        	outPuter.printerror(exception + "An error occurred while connecting to the database!");
        	app.logger.error("An error occurred while connecting to the database!");
        } catch (ClassNotFoundException exception) {
        	outPuter.printerror(exception + "Database management driver not found!");
        	app.logger.error("Database management driver not found!");
        }
    }

    /**
     * It returns a prepared statement for the given SQL statement
     *
     * @param sqlStatement the SQL statement to be prepared.
     * @param generateKeys if true, the method will return a PreparedStatement object that will contain the auto-generated
     * keys produced by executing this Statement object.
     * @return PreparedStatement
     */
    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException exception) {
            if (connection == null) app.logger.error("Database connection not established!");
            throw new SQLException(exception);
        }
    }

    /**
     * Close prepared statement.
     *
     * @param sqlStatement SQL statement to be closed.
     */
    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
        } catch (SQLException exception) {
        }
    }

    /**
     * Close connection to database.
     */
    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            outPuter.println("The connection to the database has been terminated.");
            app.logger.info("The connection to the database has been terminated.");
        } catch (SQLException exception) {
        	outPuter.printerror("An error occurred while terminating the database connection!");
            app.logger.error("An error occurred while terminating the database connection!");
        }
    }

    /**
     * Set commit mode of database.
     */
    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
        	app.logger.error("An error occurred while setting the database transaction mode!");
        }
    }

    /**
     * Set normal mode of database.
     */
    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
        	app.logger.error("An error occurred while establishing normal database mode!");
        }
    }

    /**
     * Commit database status.
     */
    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
        	app.logger.error("An error occurred while validating the new database state!");
        }
    }

    /**
     * Roll back database status.
     */
    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
        	app.logger.error("An error occurred while reverting the original state of the database!");
        }
    }

    /**
     * Set save point of database.
     */
    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
            app.logger.error("An error occurred while saving the database state!");
        }
    }

}
